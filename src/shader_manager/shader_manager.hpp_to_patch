#include <string>
#include <vector>
#include <stack>
#include <array>

#include <cstring>

#include <fmt/core.h>

using GL_ID = unsigned int;

struct GL_Draw_Parameters
{
    GLenum _mode;
    GLint _first;
    GLsizei _count;

};

//TODO: Create a generic glObject class
// Templated by the type of what we create exactly
// (Vertex_Shader, Fragment_Shader, Shader_Program,...)
// All of the classes below inherit from it in different ways
// Allows us a common interface to operate on glObject's
// (For example for getting the error message of an operation)
// Does it have a generic do_action<T> method ?

class Abstract_Shader
{
    public:

       Abstract_Shader (GL_ID shader, const std::string& code)
        : _shader(shader), _code(code)
        {
        }

        [[nodiscard]] GL_ID get_shader_id() const { return _shader;} 
        void set_code(const std::string& code) { _code = code;}

        void compile() const
        {
            int success;

            const char* data = _code.data();
            glShaderSource(_shader, 1, &data, NULL);

            glCompileShader(_shader);
            glGetShaderiv(_shader, GL_COMPILE_STATUS, &success);

            std::string log(512, ' ');
            glGetShaderInfoLog(_shader, log.length(), NULL, &log[0]);

            if (!success) {
                std::cout << "Shader compilation error : " << '\n';
                std::cout << "Shader : " << _shader << '\n';
                std::cout << "Log : " << log << '\n';
                std::exit(1);
            }
        }

        //TODO: Where do we put detach() ?
        ~Abstract_Shader()
        {
            //TODO: Deletion of a shader can fail, we need to get the error
            //message with glGetProgramiv.
            glDeleteShader(_shader);
        }
    private:
        const GL_ID _shader;
        std::string _code;
};

template <typename T>
concept Floating_Point = std::is_floating_point_v<T>;

template <Floating_Point f>
struct GL_ENUM
{
    static const GLenum value;
};

template <>
struct GL_ENUM<float>
{
    static const GLenum value = GL_FLOAT;
};

template <>
struct GL_ENUM<double>
{
    static const GLenum value = GL_DOUBLE;
};

template <Floating_Point F = float>
struct __attribute__ ((packed)) Vertex
{
    F x;
    F y;
    F z;
    using value_type = F;
};

//TODO: Look into the ContiguousContainer and SequenceContainer concepts in cppreference
//Basically, we want to be able to pass a vector or an array
template <typename Vertex_Container>
class Vertex_Shader : public Abstract_Shader
{
    // We don't really care about the container used, all we need is the
    // following :
    // - a .data() function to access the underlying representation
    // - a .size() function that gives us the number of elements
    // - a way to get the size in bytes of the type represented (eg, sizeof(tab[0]))
    // use requires to check for that (for details see Jason Turner vid about
    // introspection)
    public:
        Vertex_Shader(const std::string& code,
                      const Vertex_Container &vertices,
                      const std::vector<unsigned int> &indices = {})
            : Abstract_Shader(glCreateShader(GL_VERTEX_SHADER), code)
        {
            using Vertex_Pointer_Type = std::decay<Vertex_Container>::type;
            using Vertex_Type = std::remove_pointer<Vertex_Pointer_Type>::type;
            using Vertex_Templated_Type = Vertex_Type::value_type;

            glGenVertexArrays(1, &VAO);
            glGenBuffers(1, &VBO);
            glGenBuffers(1, &EBO);

            //TODO: is it worth it to do a lot of overloads
            glBindVertexArray(VAO);
            glBindBuffer(GL_ARRAY_BUFFER, VBO);

            // We just need something that returns an element for the call so
            // sizeof(), as it will not get executed only the return type will
            // get used.
            //
            GLint buffer_size = 3 * sizeof(Vertex_Type);
            glNamedBufferData(VBO, buffer_size, vertices, GL_STATIC_DRAW);

            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
            glBufferData(GL_ELEMENT_ARRAY_BUFFER,
                         indices.size() * sizeof(Vertex_Templated_Type),
                         indices.data(),
                         GL_STATIC_DRAW);

            //GLint vertex_stride = 0; // we let opengl figure it out
            GLint vertex_stride = sizeof(Vertex_Type);
            GLint components_nb = 3; //TODO: depending on the container ???
            glVertexAttribPointer(0,
                                  components_nb,
                                  GL_ENUM<Vertex_Templated_Type>::value,
                                  GL_FALSE,
                                  vertex_stride,
                                  nullptr);
            glEnableVertexAttribArray(0);

            // components_nb and enum are linked ????
            //_parameters = {GLtriangles , index, components_nb};
            //// Conditions to take into account for the functions are :
            //  - do we pass indices ?
            //  - number of components
            //  - that's it ???
            //_content_passed_to_PS.draw_function = switch ()
        }

        [[nodiscard]] GL_ID get_VAO() const {return VAO;}
    private:
        /* TODO: Do we want to create another GL_ID class that we could
         * constify here and that would itself call glGen*() ?
         */
        //GL_ID_VA;
        //GL_ID_BUFFER;
        GL_ID VAO;
        GL_ID VBO;
        GL_ID EBO;
};

class Fragment_Shader : public Abstract_Shader
{
    public:
        explicit Fragment_Shader(const std::string &code)
            : Abstract_Shader(glCreateShader(GL_FRAGMENT_SHADER), code)
        {}
};

class Program_Shader
{
    public:
        Program_Shader()
        {
            prog = glCreateProgram();
        }

        void use() const
        {
            glUseProgram(prog);
        }

        void draw() const
        {
                glBindVertexArray(_VAO);
                //TODO: store the function to call in the VAO object
                // - list all the draw functions
                // - do we check ???
                // - compile time checks how ??
                // - do we check when passing to the program_shader
                // - do we even need a program_shader class
                // glBindVertexArray(vertex.VAO);
                // second parameter is the starting index in the array (zeros most of the time ??)
                // third parameter is the number of indices to be rendered
                // vertex.draw_function(GL_ENUM mode, GLint first, GLsizei count);
                glDrawArrays(GL_TRIANGLES, 0, 3);
                //glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);
        }


        template <typename VS, typename S>
        class Link_Lifetime
        {

            public:
                Link_Lifetime(GL_ID prog, const VS& vertex_shader, const S& shader)
                    : _prog(prog),
                      _vertex_shader(vertex_shader.get_shader_id()),
                      _shader(shader.get_shader_id())
                {
                    glAttachShader(_prog, _vertex_shader);
                    glAttachShader(_prog, _shader);

                }
                ~Link_Lifetime()
                {
                    glDetachShader(_prog, _shader);
                    glDetachShader(_prog, _vertex_shader);
                }
            private:
                GL_ID _prog;
                GL_ID _vertex_shader;
                GL_ID _shader;
        };


        template <typename Vertex_Shader, typename Shader>
        void link(const Vertex_Shader& v, const Shader& s)
        {

            Link_Lifetime l(prog, v, s);
            int success;
            glLinkProgram(prog);
            glGetProgramiv(prog, GL_LINK_STATUS, &success);

            std::string log(512, ' ');
            glGetShaderInfoLog(prog, log.length(), NULL, &log[0]);

            if (!success) {
                throw std::logic_error(fmt::format("Program shader {}\nlink error : {}.", prog, log));
            }
            // Linkage is successful.
            _VAO = v.get_VAO();
        }

    private:
        GL_ID prog;
        GL_ID _VAO;
};

@@SHADERS@@
